#!/usr/bin/ruby

require 'mechahue'
include Mechahue

# these should go get my cached hub; if no such cached hub exists, attempt to register
# if we need to register, do that, and block until the button is pushed but throw an exception for any other error.
upper_hub = Mechahue::Hub.named("hue-upper.culdesac.kobalabs.net")
lower_hub = Mechahue::Hub.named("hue-lower.culdesac.kobalabs.net")

hubs = [ upper_hub, lower_hub ]
hubs.each { |hub| hub.activate }

hubs.each do |hub|
  hub.devices.each do |device|
    next unless device.is_a?(FOHSwitch)

    device.lower_left.watch do |update|
      button.grouped_lights(update.control_id).each do |group|
        hub.end_task(group.id)
      end

      if button.up? && button.long_press? then
        # hub.task defines a new task for a given UUID.
        # tasks are run regularly, every hub.program_tick seconds.
        # if a UUID already has a task, then that task will be removed and the new task will be scheduled.
        button.grouped_lights(update.control_id).each do |group|
          lights = group.lights
          rotator = HueRotator.new(lights, 4 * 60.0 * 60.0)

          hub.task(group.id, rotator.update_frequency) do
            rotator.update
          end
        end
      end
    end
  end
end

# master bedroom closet switch
master_closet_switch = upper_hub.resources["15fda4b4-738c-40c1-b24e-fb1570f159dc"]
master_closet_switch.lower_right.watch do |update|
  next unless update.resource.up? && update.resource.long_press?

  hubs.each do |hub|
    hub.rooms.each do |room|
      if scene = room.scene("Bedtime") then
        scene.recall(duration: 60.0 * 5)
      else
        room.grouped_lights.set_on(false, duration: 60.0 * 5)
      end
    end
  end

  # TODO: integrate with homeasst to...
  #   - lock the doors
  #   - close the garage
end

